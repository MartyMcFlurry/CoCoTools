CoCoTools is a package that facilitates interaction with the CoCoMac
database and analysis of downloaded data.  To free users from the
slowness and unreliability of the server at www.cocomac.org, CoCoTools
has been designed to store CoCoMac query results for all BrainMaps of
interest in a local sqlite database.  Of the procedures within
CoCoTools, only the population of this database is subject to the
website's limitations.

>>> from cocotools.query2db import populate_database

populate_database queries CoCoMac for Mapping and Connectivity data
referring to certain BrainMaps and returns a dict detailing which
queries failed.  (Failures are most often due to the CoCoMac server
hanging.)  The function takes two optional arguments: maps and
db_name.  maps must be an iterable container of BrainMaps or the path
to a file containing one BrainMap per line; its default value is all
the maps in the online database.  db_name is the name (without the
.sqlite suffix) for the local database that will be created; its
default value is 'query_cocomac'.

>>> failed = populate_database(['PP99', 'PP02'])
Completed 1 map, 0 conn (2 maps requested)
Completed 1 map, 1 conn (2 maps requested)
Completed 2 map, 1 conn (2 maps requested)
Completed 2 map, 2 conn (2 maps requested)
Mapping queries failed for []
Connectivity queries failed for []
>>> failed
{'Connectivity': [], 'Mapping': []}

The sqlite database is placed in a subdirectory of the directory
.cache in the user's home directory.

>>> from os.path import join, exists
>>> from os import environ as en
>>> db = join(en['HOME'], '.cache', 'py-string-funcs', 'query_cocomac.sqlite')
>>> exists(db)
True

With the database in place, analyses can be prepared.  Although graphs
of the raw data can be subjected to direct analysis, it is expected
that users will want to condense the morasse of incompatible
statements that is CoCoMac into a summary connectivity graph before
attempting to draw conclusions about macaque neuroanatomy.  The
Objective Relational Transformation (ORT) procedure was designed for
this purpose.  A full formal specification of ORT is given in Stephan
et al. (2000).

As preparation for ORT, a transformation graph is constructed from the
downloaded Mapping data.

>>> from cocotools.query2graph import TrGraph #doctest: +SKIP
